/**
 * Generated by Serve Engine
 *
 * @author gitesh
 */
package ${service.group.toLowerCase()};

import java.util.List;
import java.util.Random;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;
import org.springframework.security.oauth2.client.OAuth2ClientContext;
import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;

@Slf4j
@Configuration
@EnableResourceServer
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class ResourceSecurityConfig extends ResourceServerConfigurerAdapter {

	private final OAuth2ResourceServerProperties properties;
	private final ServiceInstance authServiceInstance;
	private final DiscoveryClient discoveryClient;

	@Autowired
	public ResourceSecurityConfig(OAuth2ResourceServerProperties properties, DiscoveryClient discoveryClient) {
		this.properties = properties;
		this.discoveryClient = discoveryClient;
		final List<ServiceInstance> instances = this.discoveryClient.getInstances(this.properties.getAuthServerServiceId());
		this.authServiceInstance = instances.get(new Random().nextInt(instances.size()));
	}

	@Override
	public void configure(ResourceServerSecurityConfigurer config) {
		log.info("\n security.oauth2.resource-id: " + this.properties.getResourceId());
		config.resourceId(this.properties.getResourceId()).tokenServices(tokenServices());
	}

	@Bean
	@Primary
	public ResourceServerTokenServices tokenServices() {
		RemoteAuthTokenServices tokenServices = new RemoteAuthTokenServices();
		tokenServices.setClientId(this.properties.getClientId());
		tokenServices.setClientSecret(this.properties.getClientSecret());
		tokenServices.setCheckTokenEndpointUrl(this.authServiceInstance.getUri() + "/oauth/check_token");
		return tokenServices;
	}

	@Bean
	public OAuth2ClientContext oAuth2ClientContext() {
		return new DefaultOAuth2ClientContext();
	}

	@Bean
	public OAuth2ProtectedResourceDetails resourceDetails() {
		final ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();
		details.setAccessTokenUri(this.authServiceInstance.getUri() + "/oauth/token");
		details.setClientId(this.properties.getClientId());
		details.setClientSecret(this.properties.getClientSecret());
		return details;
	}
}

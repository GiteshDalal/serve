/**
 * Generated by Serve Engine
 *
 * @author gitesh
 */
package com.giteshdalal.userservice;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.module.jsonSchema.JsonSchema;
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator;
import com.giteshdalal.userservice.resource.generated.ClientResource;
import com.giteshdalal.userservice.resource.generated.PrivilegeResource;
import com.giteshdalal.userservice.resource.generated.RoleResource;
import com.giteshdalal.userservice.resource.generated.UserResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/schema")
public class SchemaController {

	@Autowired
	private JsonSchemaGenerator schemaGenerator;

	@PreAuthorize("hasAnyRole('ADMIN','EMPLOYEE:READ')")
	@RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	Map<String, JsonSchema> getMetaInfo() throws JsonMappingException {
		Map<String, JsonSchema> schemas = new HashMap<>();
		schemas.put("/users", schemaGenerator.generateSchema(UserResource.class));
		schemas.put("/roles", schemaGenerator.generateSchema(RoleResource.class));
		schemas.put("/privileges", schemaGenerator.generateSchema(PrivilegeResource.class));
		schemas.put("/clients", schemaGenerator.generateSchema(ClientResource.class));
		return schemas;
	}
}

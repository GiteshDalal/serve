/**
 * Generated by Serve Engine
 *
 * @author gitesh
 */
package com.giteshdalal.userservice;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator;
import com.giteshdalal.userservice.model.generated.ClientModel;
import com.giteshdalal.userservice.model.generated.PrivilegeModel;
import com.giteshdalal.userservice.model.generated.RoleModel;
import com.giteshdalal.userservice.model.generated.UserModel;
import com.giteshdalal.userservice.resource.generated.ClientResource;
import com.giteshdalal.userservice.resource.generated.PrivilegeResource;
import com.giteshdalal.userservice.resource.generated.RoleResource;
import com.giteshdalal.userservice.resource.generated.UserResource;
import org.modelmapper.ModelMapper;
import org.modelmapper.jackson.JsonNodeValueReader;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfiguration {

	@Bean
	public JsonSchemaGenerator schemaGenerator() {
		return new JsonSchemaGenerator(new ObjectMapper());
	}

	@Bean
	public ModelMapper modelMapperInstance() {
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().addValueReader(new JsonNodeValueReader());
		configTypeMaps(modelMapper);
		return modelMapper;
	}

	/**
	 * This method is used to configure type maps for mapper.
	 *
	 * @param mapper
	 */
	private void configTypeMaps(ModelMapper mapper) {

		// ClientModel -> ClientResource
		mapper.createTypeMap(ClientModel.class, ClientResource.class).addMappings(m -> {
			m.skip(ClientResource::setClientSecret); // Skip clientSecret, we do not want to send it in response
		});

		// ClientResource -> ClientModel
		mapper.createTypeMap(ClientResource.class, ClientModel.class).addMappings(m -> {
			m.skip(ClientModel::setUid); // Skip uid, it's generated by system when needed
			m.skip(ClientModel::setClientSecret); // Skip clientSecret, it's managed by auth-service
		});

		// UserModel -> UserResource
		mapper.createTypeMap(UserModel.class, UserResource.class).addMappings(m -> {
			m.skip(UserResource::setPassword); // Skip password, we do not want to send it in response
		});

		// UserResource -> UserModel
		mapper.createTypeMap(UserResource.class, UserModel.class).addMappings(m -> {
			m.skip(UserModel::setUid); // Skip uid, it's generated by system when needed
			m.skip(UserModel::setPassword); // Skip password, it's managed by auth-service
		});

		// RoleModel -> RoleResource
		mapper.createTypeMap(RoleModel.class, RoleResource.class).addMappings(m -> {
			m.skip(RoleResource::setUsers); // Skipping to avoid cyclic redundancy
		});

		// RoleResource -> RoleModel
		mapper.createTypeMap(RoleResource.class, RoleModel.class).addMappings(m -> {
			m.skip(RoleModel::setUid); // Skip uid, it's generated by system when needed
		});

		// PrivilegeModel -> PrivilegeResource
		mapper.createTypeMap(PrivilegeModel.class, PrivilegeResource.class).addMappings(m -> {
			m.skip(PrivilegeResource::setRoles); // Skipping to avoid cyclic redundancy
		});

		// PrivilegeResource -> PrivilegeModel
		mapper.createTypeMap(PrivilegeResource.class, PrivilegeModel.class).addMappings(m -> {
			m.skip(PrivilegeModel::setUid); // Skip uid, it's generated by system when needed
		});
	}
}
